name: Repository Maintenance

on:
  schedule:
    - cron: '0 4 * * 0'  # Weekly on Sunday at 4:00 AM UTC
  workflow_dispatch:

env:
  FORCE_COLOR: 1

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  maintenance:
    name: Weekly Maintenance
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 1
      
      - name: Repository health check
        id: health_check
        run: |
          set -euo pipefail
          echo "🏥 Performing repository health check..."
          
          # Initialize status
          issues_found=false
          health_report=""
          
          # Check ZIP file integrity
          if [[ -f "vmware-icons.zip" ]]; then
            if unzip -t vmware-icons.zip > /dev/null 2>&1; then
              echo "✅ ZIP file integrity: PASS"
              health_report+="✅ ZIP file integrity: PASS\n"
            else
              echo "❌ ZIP file integrity: FAIL"
              health_report+="❌ ZIP file integrity: FAIL\n"
              issues_found=true
            fi
          else
            echo "❌ ZIP file missing"
            health_report+="❌ ZIP file missing\n"
            issues_found=true
          fi
          
          # Check required files
          required_files=("README.md" "LICENSE" "package.json" "requirements.txt" "SECURITY.md" "CONTRIBUTORS.md")
          for file in "${required_files[@]}"; do
            if [[ -f "$file" ]]; then
              echo "✅ Required file $file: EXISTS"
              health_report+="✅ Required file $file: EXISTS\n"
            else
              echo "❌ Required file $file: MISSING"
              health_report+="❌ Required file $file: MISSING\n"
              issues_found=true
            fi
          done
          
          # Check workflow files
          workflow_files=(".github/workflows/ci.yml" ".github/workflows/deploy.yml" ".github/workflows/security.yml")
          for workflow in "${workflow_files[@]}"; do
            if [[ -f "$workflow" ]]; then
              echo "✅ Workflow $workflow: EXISTS"
              health_report+="✅ Workflow $workflow: EXISTS\n"
            else
              echo "❌ Workflow $workflow: MISSING"
              health_report+="❌ Workflow $workflow: MISSING\n"
              issues_found=true
            fi
          done
          
          # Save results
          echo "issues_found=$issues_found" >> $GITHUB_OUTPUT
          echo -e "$health_report" > health_report.txt
          
          if [[ "$issues_found" == "false" ]]; then
            echo "🎉 All health checks passed!"
          else
            echo "⚠️ Issues found during health check"
          fi
      
      - name: Update repository statistics
        run: |
          echo "📊 Updating repository statistics..."
          
          # Count icons in ZIP
          if [[ -f "vmware-icons.zip" ]]; then
            icon_count=$(unzip -l vmware-icons.zip | grep -c '\.png$' || echo "0")
            echo "📦 Total icons: $icon_count"
            
            # Calculate ZIP size
            zip_size=$(ls -lh vmware-icons.zip | awk '{print $5}')
            echo "💾 ZIP size: $zip_size"
            
            # Save statistics
            cat > STATS.md << EOF
          # Repository Statistics
          
          **Last Updated**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          
          ## Icon Collection
          - **Total Icons**: $icon_count PNG files
          - **Archive Size**: $zip_size
          - **Format**: PNG with transparent backgrounds
          - **Quality**: High-resolution, enterprise-ready
          
          ## Repository Health
          - **CI/CD Status**: ✅ Automated
          - **Security Scanning**: ✅ Weekly
          - **Dependency Updates**: ✅ Automated
          - **Free Tier Optimized**: ✅ 100%
          
          ## Maintenance Schedule
          - **Weekly**: Health checks, statistics update
          - **Monthly**: Icon collection review
          - **Quarterly**: Comprehensive audit
          
          ---
          *Generated automatically by GitHub Actions*
          EOF
          fi
      
      - name: Create maintenance issue if needed
        if: steps.health_check.outputs.issues_found == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const healthReport = fs.readFileSync('health_report.txt', 'utf8');
            
            const issueBody = `## 🚨 Repository Maintenance Required
            
            Automated health check detected issues that require attention.
            
            ### Health Check Results
            \`\`\`
            ${healthReport}
            \`\`\`
            
            ### Action Required
            - [ ] Review and fix failed health checks
            - [ ] Verify ZIP file integrity
            - [ ] Ensure all required files are present
            - [ ] Test workflow functionality
            
            ### Auto-Resolution
            This issue will be automatically closed when all health checks pass.
            
            **Created**: ${new Date().toISOString()}
            **Priority**: High
            **Labels**: maintenance, automated, health-check
            `;
            
            // Check if maintenance issue already exists
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'maintenance,automated',
              state: 'open'
            });
            
            if (issues.data.length === 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `🔧 Repository Maintenance Required - ${new Date().toISOString().split('T')[0]}`,
                body: issueBody,
                labels: ['maintenance', 'automated', 'health-check', 'priority-high']
              });
              console.log('✅ Maintenance issue created');
            } else {
              console.log('ℹ️ Maintenance issue already exists');
            }
      
      - name: Close resolved maintenance issues
        if: steps.health_check.outputs.issues_found == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            // Find open maintenance issues
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'maintenance,automated',
              state: 'open'
            });
            
            for (const issue of issues.data) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: `🎉 **Auto-Resolution**: All health checks are now passing!\n\n✅ Repository maintenance completed successfully.\n\n*Closed automatically by maintenance workflow*`
              });
              
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                state: 'closed'
              });
              
              console.log(`✅ Closed maintenance issue #${issue.number}`);
            }
      
      - name: Maintenance summary
        run: |
          echo "🏁 Weekly maintenance completed"
          echo "📋 Summary:"
          echo "  🏥 Health check: $(if [[ '${{ steps.health_check.outputs.issues_found }}' == 'false' ]]; then echo 'PASSED'; else echo 'ISSUES FOUND'; fi)"
          echo "  📊 Statistics: UPDATED"
          echo "  🤖 Automation: ACTIVE"
          echo "  💰 Free tier: OPTIMIZED"